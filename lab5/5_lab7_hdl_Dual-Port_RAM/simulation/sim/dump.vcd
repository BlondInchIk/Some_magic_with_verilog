$date
	Sun Dec 10 22:29:43 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module testbench $end
$var wire 8 ! data_in_reg [7:0] $end
$var wire 8 " data_out [7:0] $end
$var wire 4 # read_addr_reg [3:0] $end
$var wire 4 $ w_we [3:0] $end
$var wire 4 % write_addr_reg [3:0] $end
$var wire 8 & HEX5 [7:0] $end
$var wire 8 ' HEX4 [7:0] $end
$var wire 8 ( HEX3 [7:0] $end
$var wire 8 ) HEX2 [7:0] $end
$var wire 8 * HEX1 [7:0] $end
$var wire 8 + HEX0 [7:0] $end
$var reg 2 , DC [1:0] $end
$var reg 8 - SW [7:0] $end
$var reg 1 . clk $end
$var reg 1 / rst_n $end
$scope module dut $end
$var wire 10 0 SW [9:0] $end
$var wire 1 . clk $end
$var wire 1 / rst_n $end
$var wire 4 1 write_addr_reg [3:0] $end
$var wire 4 2 w_we [3:0] $end
$var wire 4 3 read_addr_reg [3:0] $end
$var wire 8 4 data_out [7:0] $end
$var wire 8 5 data_in_reg [7:0] $end
$var wire 8 6 HEX5 [7:0] $end
$var wire 8 7 HEX4 [7:0] $end
$var wire 8 8 HEX3 [7:0] $end
$var wire 8 9 HEX2 [7:0] $end
$var wire 8 : HEX1 [7:0] $end
$var wire 8 ; HEX0 [7:0] $end
$var parameter 32 < ADDR_WIDTH $end
$var parameter 32 = DATA_WIDTH $end
$scope module dc2in4 $end
$var wire 2 > a [1:0] $end
$var reg 4 ? dc_out [3:0] $end
$upscope $end
$scope module dual_port_RAM $end
$var wire 1 . clk $end
$var wire 1 @ we $end
$var wire 4 A write_addr [3:0] $end
$var wire 4 B read_addr [3:0] $end
$var wire 8 C data_in [7:0] $end
$var parameter 32 D ADDR_WIDTH $end
$var parameter 32 E DATA_WIDTH $end
$var reg 8 F data_out [7:0] $end
$upscope $end
$scope module hexto7segment_data_in0 $end
$var wire 4 G in_hex [3:0] $end
$var reg 7 H out_7seg [6:0] $end
$upscope $end
$scope module hexto7segment_data_in1 $end
$var wire 4 I in_hex [3:0] $end
$var reg 7 J out_7seg [6:0] $end
$upscope $end
$scope module hexto7segment_data_out0 $end
$var wire 4 K in_hex [3:0] $end
$var reg 7 L out_7seg [6:0] $end
$upscope $end
$scope module hexto7segment_data_out1 $end
$var wire 4 M in_hex [3:0] $end
$var reg 7 N out_7seg [6:0] $end
$upscope $end
$scope module hexto7segment_read_addr $end
$var wire 4 O in_hex [3:0] $end
$var reg 7 P out_7seg [6:0] $end
$upscope $end
$scope module hexto7segment_write_addr $end
$var wire 4 Q in_hex [3:0] $end
$var reg 7 R out_7seg [6:0] $end
$upscope $end
$scope module register_data_in $end
$var wire 1 . clk $end
$var wire 8 S d [7:0] $end
$var wire 1 T ena $end
$var wire 1 / rst_n $end
$var parameter 32 U SIZE $end
$var reg 8 V q [7:0] $end
$upscope $end
$scope module register_read_addr $end
$var wire 1 . clk $end
$var wire 4 W d [3:0] $end
$var wire 1 X ena $end
$var wire 1 / rst_n $end
$var parameter 32 Y SIZE $end
$var reg 4 Z q [3:0] $end
$upscope $end
$scope module register_write_addr $end
$var wire 1 . clk $end
$var wire 4 [ d [3:0] $end
$var wire 1 \ ena $end
$var wire 1 / rst_n $end
$var parameter 32 ] SIZE $end
$var reg 4 ^ q [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 ]
b100 Y
b1000 U
b1000 E
b100 D
b1000 =
b100 <
$end
#0
$dumpvars
b0 ^
0\
b1111 [
b0 Z
0X
b1111 W
b0 V
1T
b1111 S
b1000000 R
b0 Q
b1000000 P
b0 O
bx N
bx M
bx L
bx K
b1000000 J
b0 I
b1000000 H
b0 G
bx F
b0 C
b0 B
b0 A
0@
b1 ?
b0 >
b1000000 ;
b1000000 :
b1xxxxxxx 9
b1xxxxxxx 8
b11000000 7
b11000000 6
b0 5
bx 4
b0 3
b1 2
b0 1
b1111 0
0/
1.
b1111 -
b0 ,
b1000000 +
b1000000 *
b1xxxxxxx )
b1xxxxxxx (
b11000000 '
b11000000 &
b0 %
b1 $
b0 #
bx "
b0 !
$end
#10
1/
#20
0.
#40
b1110 +
b1110 ;
b1110 H
b1111 G
b1111 !
b1111 5
b1111 C
b1111 V
1.
#60
b1000000 &
b1000000 6
b11000000 *
b11000000 :
b10001110 +
b10001110 ;
1\
0T
b100 $
b100 2
b100 ?
b10 >
b0 S
b0 W
b0 [
0.
b10 ,
b1000000000 0
b0 -
#80
1.
#100
b11000000 &
b11000000 6
b0xxxxxxx (
b0xxxxxxx 8
b0xxxxxxx )
b0xxxxxxx 9
1@
0\
b1000 $
b1000 2
b1000 ?
b11 >
0.
b1100000000 0
b11 ,
#120
1.
#140
b1000000 &
b1000000 6
b1xxxxxxx (
b1xxxxxxx 8
b1xxxxxxx )
b1xxxxxxx 9
0@
1\
b100 $
b100 2
b100 ?
b10 >
b1 S
b1 W
b1 [
0.
b10 ,
b1000000001 0
b1 -
#160
b11000000 (
b11000000 8
b1000000 N
b10001110 )
b10001110 9
b1110 L
b0 M
b1111 K
b1111001 &
b1111001 6
b1111001 R
b1111 "
b1111 4
b1111 F
b1 %
b1 1
b1 A
b1 Q
b1 ^
1.
#180
b11111001 &
b11111001 6
b1000000 (
b1000000 8
b1110 )
b1110 9
1@
0\
b1000 $
b1000 2
b1000 ?
b11 >
0.
b1100000001 0
b11 ,
#200
1.
#220
b1111001 &
b1111001 6
b11000000 (
b11000000 8
b10001110 )
b10001110 9
0@
1\
b100 $
b100 2
b100 ?
b10 >
b10 S
b10 W
b10 [
0.
b10 ,
b1000000010 0
b10 -
#240
b100100 &
b100100 6
b100100 R
b10 %
b10 1
b10 A
b10 Q
b10 ^
1.
#260
b10100100 &
b10100100 6
b1000000 (
b1000000 8
b1110 )
b1110 9
1@
0\
b1000 $
b1000 2
b1000 ?
b11 >
0.
b1100000010 0
b11 ,
#280
1.
#300
b1000000 '
b1000000 7
b11000000 (
b11000000 8
b10001110 )
b10001110 9
0@
1X
b10 $
b10 2
b10 ?
b1 >
b0 S
b0 W
b0 [
0.
b1 ,
b100000000 0
b0 -
#320
1.
#340
b1 S
b1 W
b1 [
0.
b100000001 0
b1 -
#360
b1111001 '
b1111001 7
b1111001 P
b1 #
b1 3
b1 B
b1 O
b1 Z
1.
#380
b10 S
b10 W
b10 [
0.
b100000010 0
b10 -
#400
b100100 '
b100100 7
b100100 P
b10 #
b10 3
b10 B
b10 O
b10 Z
1.
#420
b10100100 '
b10100100 7
b1000000 *
b1000000 :
b1110 +
b1110 ;
0X
1T
b1 $
b1 2
b1 ?
b0 >
b10101010 S
b1010 W
b1010 [
0.
b0 ,
b10101010 0
b10101010 -
#440
b1000 *
b1000 :
b1000 J
b1000 +
b1000 ;
b1000 H
b1010 I
b1010 G
b10101010 !
b10101010 5
b10101010 C
b10101010 V
1.
#460
b100100 &
b100100 6
b10001000 *
b10001000 :
b10001000 +
b10001000 ;
1\
0T
b100 $
b100 2
b100 ?
b10 >
b1 S
b1 W
b1 [
0.
b10 ,
b1000000001 0
b1 -
#480
b1111001 &
b1111001 6
b1111001 R
b1 %
b1 1
b1 A
b1 Q
b1 ^
1.
#500
b11111001 &
b11111001 6
b100100 '
b100100 7
0\
1X
b10 $
b10 2
b10 ?
b1 >
0.
b100000001 0
b1 ,
#520
b1111001 '
b1111001 7
b1111001 P
b1 #
b1 3
b1 B
b1 O
b1 Z
1.
#540
b11111001 '
b11111001 7
b1000000 (
b1000000 8
b1110 )
b1110 9
1@
0X
b1000 $
b1000 2
b1000 ?
b11 >
0.
b1100000001 0
b11 ,
#560
1.
#580
0.
#600
b1000 (
b1000 8
b1000 N
b1000 )
b1000 9
b1000 L
b1010 M
b1010 K
b10101010 "
b10101010 4
b10101010 F
1.
#620
0.
#640
1.
#660
0.
#680
1.
#700
0.
#720
1.
#740
0.
#760
1.
